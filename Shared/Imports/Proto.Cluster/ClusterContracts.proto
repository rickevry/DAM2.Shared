syntax = "proto3";
package cluster;
option csharp_namespace = "Proto.Cluster";
import "Protos.proto";

//request response call from Identity actor sent to each member
//asking what activations they hold that belong to the requester
message IdentityHandoverRequest {
    uint64 event_id = 1;
    string address = 2;
    repeated Member members = 3;
}

//response message to the above
message IdentityHandoverResponse {
    repeated Activation actors = 1;
}

message ClusterIdentity{
    string identity = 1;
    string kind = 2;
}

message Activation {
    .actor.PID pid = 1;    
    ClusterIdentity cluster_identity = 2;
}

message ActivationTerminated {
    .actor.PID pid = 1;
    ClusterIdentity cluster_identity = 2;
}

message ActivationRequest {
    ClusterIdentity cluster_identity = 1;
    string request_id = 2;
}

message ProxyActivationRequest {
  ClusterIdentity cluster_identity = 1;
  .actor.PID replaced_activation = 2;
}

message ActivationResponse {
    actor.PID pid = 1;
}

message GrainRequest {
    int32 method_index = 1;
    bytes message_data = 2;
    string message_type_name = 3;
}

message GrainResponse {
  bytes message_data = 1;
  string message_type_name = 2;
}

message GrainErrorResponse {
    string err = 1;
}

message Member {
    string host = 1;
    int32 port = 2;
    string id = 3;
    repeated string kinds = 4;
}

message ClusterTopology {
    uint64 event_id = 1;
    repeated Member members = 2;
    repeated Member joined = 3;
    repeated Member left = 4;
    repeated Member banned = 5;
}

message HeartbeatRequest {
}

message HeartbeatResponse {
  uint32 actor_count = 1;
  string member_id = 2;
  uint32 membership_hash_code = 3;
}

message ClusterTopologyNotification {
  string member_id = 1;
  uint32 membership_hash_code = 2;
  string leader_id = 3;
}

message GracefulShutdown {
  string member_id = 3;
}



message SubscriberIdentity {
  oneof Identity {
    .actor.PID pid = 1;
    ClusterIdentity cluster_identity = 2;
  }
}

message Subscribers {
  repeated SubscriberIdentity subscribers = 1;
}

message SubscribeRequest {
  SubscriberIdentity subscriber = 1;
}

message SubscribeResponse {

}

message UnsubscribeRequest {
  SubscriberIdentity subscriber = 1;
}

message UnsubscribeResponse {

}

message PublishRequest {
  bytes data = 1;
}

message PublishResponse {}

//this goes out to the delivery actors
message DeliveryBatch {
  Subscribers subscribers = 1;
  ProducerBatch batch = 2;
}

//messages going into the topic actors
message ProducerBatch {
  repeated string type_names = 1;
  repeated ProducerEnvelope envelopes = 2;
}

message ProducerEnvelope {
  int32 type_id = 1;
  bytes message_data = 2;
  int32 serializer_id = 3;
}

//messages going out of the topic actors
message TopicBatchRequest {
  repeated string type_names = 1;
  repeated TopicEnvelope envelopes = 2;
}

message TopicBatchResponse {
  
}

message TopicEnvelope {
  int32 type_id = 1;
  bytes message_data = 2;
  int32 serializer_id = 3;
}
